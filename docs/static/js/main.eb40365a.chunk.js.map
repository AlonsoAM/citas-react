{"version":3,"sources":["components/Cita.js","components/Formulario.js","App.js","reportWebVitals.js","index.js"],"names":["Cita","cita","eliminarCita","className","mascota","propietario","fecha","hora","sintomas","onClick","id","Formulario","crearCita","useState","actualizarCita","actualizarState","e","target","name","value","error","ActualizarError","onSubmit","preventDefault","trim","uuid","type","placeholder","onChange","App","citasInciales","JSON","parse","localStorage","getItem","citas","guardarCitas","useEffect","setItem","stringify","nuevasCitas","filter","titulo","length","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eb40365a.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Cita = ({ cita, eliminarCita }) => {\n  return (\n    <div className=\"cita\">\n      <p>\n        Mascota: <span>{cita.mascota}</span>\n      </p>\n      <p>\n        Dueño: <span>{cita.propietario}</span>\n      </p>\n      <p>\n        Fecha: <span>{cita.fecha}</span>\n      </p>\n      <p>\n        Hora: <span>{cita.hora}</span>\n      </p>\n      <p>\n        Síntomas: <span>{cita.sintomas}</span>\n      </p>\n      <button\n        className=\"button eliminar u-full-width\"\n        onClick={() => eliminarCita(cita.id)}\n      >\n        Eliminar &times;\n      </button>\n    </div>\n  )\n}\n\nCita.propTypes = {\n  cita: PropTypes.object.isRequired,\n  eliminarCita: PropTypes.func.isRequired,\n}\n\nexport default Cita\n","import React, { useState } from 'react'\nimport uuid from 'uuid/dist/v4'\nimport PropTypes from 'prop-types'\n\nconst Formulario = ({ crearCita }) => {\n  // Crear State de cita\n  const [cita, actualizarCita] = useState({\n    mascota: '',\n    propietario: '',\n    fecha: '',\n    hora: '',\n    sintomas: '',\n  })\n\n  // Funcion que se ejecuta cada que el usuario escrbe en un input\n  const actualizarState = (e) => {\n    // console.log(e.target.value)\n    actualizarCita({\n      ...cita,\n      [e.target.name]: e.target.value,\n    })\n  }\n\n  const [error, ActualizarError] = useState(false)\n\n  // Extraer los valores\n  const { mascota, propietario, fecha, hora, sintomas } = cita\n\n  // Cuando el usuario presiona el boton de agregar cita\n  const submitCita = (e) => {\n    e.preventDefault()\n    // Validar los campos\n    if (\n      mascota.trim() === '' ||\n      propietario.trim() === '' ||\n      fecha.trim() === '' ||\n      hora.trim() === '' ||\n      sintomas.trim() === ''\n    ) {\n      ActualizarError(true)\n      return\n    }\n\n    // Eliminar el mensaje de error una vez haya pasado la validación\n    ActualizarError(false)\n\n    // Asignar un ID\n    cita.id = uuid()\n    // console.log(cita)\n\n    // Crear la cita\n    crearCita(cita)\n\n    // Reiniciar el form\n    actualizarCita({\n      mascota: '',\n      propietario: '',\n      fecha: '',\n      hora: '',\n      sintomas: '',\n    })\n  }\n\n  return (\n    <>\n      <h2>Crear Cita</h2>\n\n      {error ? (\n        <p className=\"alerta-error\">Todos los campos son obligatorios</p>\n      ) : null}\n\n      <form onSubmit={submitCita}>\n        <label>Nombre Mascota</label>\n        <input\n          type=\"text\"\n          name=\"mascota\"\n          className=\"u-full-width\"\n          placeholder=\"Nombre Mascota\"\n          onChange={actualizarState}\n          value={mascota}\n        />\n        <label>Nombre Dueño</label>\n        <input\n          type=\"text\"\n          name=\"propietario\"\n          className=\"u-full-width\"\n          placeholder=\"Nombre del dueño de la mascota\"\n          onChange={actualizarState}\n          value={propietario}\n        />\n        <label>Fecha</label>\n        <input\n          type=\"date\"\n          name=\"fecha\"\n          className=\"u-full-width\"\n          onChange={actualizarState}\n          value={fecha}\n        />\n        <label>Hora</label>\n        <input\n          type=\"time\"\n          name=\"hora\"\n          className=\"u-full-width\"\n          onChange={actualizarState}\n          value={hora}\n        />\n        <label>Síntomas</label>\n        <textarea\n          className=\"u-full-width\"\n          name=\"sintomas\"\n          onChange={actualizarState}\n          value={sintomas}\n        ></textarea>\n        <button type=\"submit\" className=\"u-full-width button-primary\">\n          Agregar Citas\n        </button>\n      </form>\n    </>\n  )\n}\n\nFormulario.propTypes = {\n  crearCita: PropTypes.func.isRequired,\n}\n\nexport default Formulario\n","import { useEffect, useState } from 'react'\nimport Cita from './components/Cita'\nimport Formulario from './components/Formulario'\nimport React from 'react'\n\nfunction App() {\n  // Citas en localStorage\n  let citasInciales = JSON.parse(localStorage.getItem('citas'))\n  if (!citasInciales) {\n    citasInciales = null\n  }\n\n  // Arreglo de citas\n  const [citas, guardarCitas] = useState(citasInciales)\n\n  // useEfect para realizar ciertas operaciones cuando el state cambia\n  useEffect(() => {\n    if (citasInciales) {\n      localStorage.setItem('citas', JSON.stringify(citas))\n    } else {\n      localStorage.setItem('citas', JSON.stringify(null))\n    }\n  }, [citas, citasInciales])\n\n  // Función que tome las citas actuales y agregue la nueva\n  const crearCita = (cita) => {\n    guardarCitas([...citas, cita])\n  }\n\n  // función que elimina una cita por su id\n  const eliminarCita = (id) => {\n    const nuevasCitas = citas.filter((cita) => cita.id !== id)\n    guardarCitas(nuevasCitas)\n  }\n\n  // Mensaje condicional\n  const titulo = citas.length === 0 ? 'No hay citas' : 'Administra tus citas'\n\n  return (\n    <>\n      <h1>Administrador de Pacientes</h1>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n            <Formulario crearCita={crearCita} />\n          </div>\n          <div className=\"one-half column\">\n            <h2>{titulo}</h2>\n            {citas.map((cita) => (\n              <Cita key={cita.id} cita={cita} eliminarCita={eliminarCita} />\n            ))}\n          </div>\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}